import random


short_answer_questions = [
    # 20 short-answer questions generated by ChatGPT
    "What is the main reason this email was written?",
    "Which key piece of information or request is central here?",
    "Who is the email addressed to, and who is it from?",
    "Is a specific date, deadline, or timeframe mentioned?",
    "How would you describe the email's tone (e.g., formal, informal)?",
    "Is a specific document, dataset, or resource requested?",
    "Is there a concrete request or call to action in this email?",
    "Are any external organizations or people outside the company mentioned?",
    "Does the email address any financial aspects, figures, or budgets?",
    "Does the email refer to a personal matter or a business project?",
    "Does the email mention an upcoming change, event, or decision?",
    "Is the email part of an ongoing conversation or a standalone message?",
    "Are there any references to a previous message or earlier exchange?",
    "Identify one keyword that summarizes the email's content.",
    "Does the email mention any specific issues or challenges?",
    "According to the email, which person or people need to take action or respond?",
    "Are there any indications of confidentiality or security considerations?",
    "Does the message aim to share information or to influence a decision?",
    "Does the email reference any specific regulations, guidelines, or internal rules?",
    "Is this email an invitation, a summary, or feedback?"
]

long_answer_questions = [
    # 20 long-answer questions generated by ChatGPT
    "How could this email be placed within a broader business or organizational context?",
    "What potential consequences or impacts might arise from this email's content?",
    "How is the email's tone (e.g., formal, collegial, urgent) justified, and how does it shape the request?",
    "Which interests or goals does the sender pursue, and how are they made clear?",
    "In what ways could recipients or the sender be influenced by previous messages or existing projects?",
    "Which departments or teams might be affected by the issues mentioned in the email, and why?",
    "To what extent can this email provide insights into workflows or decision-making processes?",
    "Which follow-up questions or clarifications remain unanswered and should be addressed in a subsequent message?",
    "How does the email connect personal, technical, or business aspects?",
    "What risks or opportunities arise from the issue described in the email?",
    "Which measures or resources might be necessary to meet the requirements of this email?",
    "How effectively is the information in the email structured and presented?",
    "Could the communication in this email lead to misunderstandings, and if so, why?",
    "Which pieces of evidence, documents, or data are either mentioned directly or assumed implicitly?",
    "What role do external factors (e.g., market conditions, regulatory requirements) play in relation to the email?",
    "In what way might this message be part of a larger strategic decision?",
    "Are there signs that specific organizational priorities (e.g., cost, time, quality) are taking precedence?",
    "How might this email affect the trust relationship between the sender and the recipient?",
    "What argumentation strategy is the sender using to persuade the recipient(s) to take a specific action?",
    "What subsequent steps or responses might follow from this email?"
]


def decide_long_question(sender: str, body_length: int) -> bool:
    """
    Determines whether an email should receive a short or long question
    based on the sender's address (keywords) and the email body length (in characters).

    Criteria:
    1) Specific keywords or names in the sender (e.g., top management or legal references)
       indicate complexity or body length exceeds 200 char's -> true
    2) Otherwise -> false
    """

    # Keywords that suggest a complex or strategic context
    keywords_for_long = [
        "legal",
        "law",
        "mark.haedicke",
        "jeff.skilling",
        "kenneth.lay",
        "andrew.fastow",
        "cliff.baxter",
        "richard.buy",
        "richard.sanders",
        "richard.shapiro",
        "steven.kean"
    ]

    sender_lower = sender.lower()

    # If sender contains any 'long' keyword, classify as 'long'
    for keyword in keywords_for_long:
        if keyword in sender_lower:
            return True

    # If email body is longer than 200 characters, classify as 'long'
    if body_length > 200:
        return True

    # Default: 'short'
    return False


def generate_question(sender: str, body: str):
    """
    Randomly selects a question based on email metadata
    """    

    if decide_long_question(sender, len(body)):
        return random.choice(long_answer_questions)
    else:
        return random.choice(short_answer_questions)


